mod tests;

const GF256_LOG_TABLE: [u8; 256] = [
    0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03, 
    0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1, 
    0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78, 
    0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e, 
    0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38, 
    0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10, 
    0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba, 
    0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57, 
    0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8, 
    0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0, 
    0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7, 
    0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d, 
    0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1, 
    0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab, 
    0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5, 
    0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07  
];

const GF256_ANTILOG_TABLE: [u8; 256] = [
    0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35, 
    0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa, 
    0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31, 
    0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd, 
    0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88, 
    0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a, 
    0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3, 
    0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0, 
    0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41, 
    0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75, 
    0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80, 
    0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54, 
    0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca, 
    0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e, 
    0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17, 
    0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01  
];

const SBOX_TABLE: [u8; 256] = [                                                        
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 
];

struct Matrix {
    // 4x4 byte Matrix
    data: [[u8; 4]; 4], 
}

impl Matrix {
    // Empty constructor
    fn new() -> Self {
        Matrix {
            data: [[0u8; 4]; 4],
        }
    }

    // Construct from array
    fn from_array(array: [u8; 16]) -> Self {
        let mut matrix = Self::new();
        for (i, &val) in array.iter().enumerate() {
            matrix.data[i / 4][i % 4] = val;
        }
        matrix
    }

    // Access element
    fn get(&self, row: usize, col: usize) -> u8 {
        self.data[row][col]
    }

    // Set element
    fn set(&mut self, row: usize, col: usize, value: u8) {
        self.data[row][col] = value;
    }

    // Convert matrix back to array
    fn to_array(&self) -> [u8; 16] {
        let mut array = [0u8; 16];
        for i in 0..16 {
            array[i] = self.data[i / 4][i % 4];
        }
        array
    }

    // Print matrix
    fn print(&self) {
        for row in self.data.iter() {
            for &val in row.iter() {
                print!("{:02x} ", val);
            }
            println!();
        }
    }

    // Rotate data to the left
    fn rotate_left(&mut self, row: usize, position: usize) {
        self.data[row].rotate_left(position);
    }
}

struct AES {
    // Internal state
    state: Matrix
}

impl AES {
    // Initialize AES from 4x4 byte matrix (128 bit)
    fn from_matrix(matrix: Matrix) -> Self {
        AES { state: matrix }
    }

    // Round key step (XOR state with round key)
    fn add_round_key(&mut self, round_key: &Matrix) {
        for row in 0..4 {
            for col in 0..4 {
                let state_bits =  self.state.get(row, col);
                let round_key_bits = round_key.get(row, col);
                let xor  = state_bits ^ round_key_bits;
                self.state.set(row, col, xor);
            }
        }
    }

    // Substitution step (using sbox table)
    fn sub_bytes(&mut self) {
        for row in 0..4 {
            for col in 0..4 {
                let state_bits =  self.state.get(row, col);
                let substitution = SBOX_TABLE[state_bits as usize];
                self.state.set(row, col, substitution);
            }
        }
    }

    // Shift rows step
    fn shift_rows(&mut self) {
        // Leave first row unchanged
        // Shift second row by 1
        self.state.rotate_left(1, 1);
        // Shift third row by 2
        self.state.rotate_left(2, 2);
        // Shift fourth row by 3
        self.state.rotate_left(3, 3);
    }

    // Mix columns step
    fn mix_columns(&mut self) {
        // Get column values
        for col in 0..4 {
            let columns = [
                self.state.get(0, col),
                self.state.get(1, col),
                self.state.get(2, col),
                self.state.get(3, col)
            ];
            // Apply transformations
            // First transformation (2 * c[0]) ^ (3 * c[1]) ^ (1 * c[2]) ^ (1 * c[3])
            let transformation1 = Self::gf256_mul(0x02, columns[0])
                                    ^ Self::gf256_mul(0x03, columns[1])
                                    ^ columns[2]
                                    ^ columns[3];
            self.state.set(0, col, transformation1);
            // Second transformation (1 * c[0]) ^ (2 * c[1]) ^ (3 * c[2]) ^ (1 * c[3])
            let transformation2 = columns[0]
                                    ^ Self::gf256_mul(0x02, columns[1])
                                    ^ Self::gf256_mul(0x03, columns[2])
                                    ^ columns[3];
            self.state.set(1, col, transformation2);
            // Third transformation (1 * c[0]) ^ (1 * c[1]) ^ (2 * c[2]) ^ (3 * c[3])
            let transformation3 = columns[0]
                                    ^ columns[1]
                                    ^ Self::gf256_mul(0x02, columns[2])
                                    ^ Self::gf256_mul(0x03, columns[3]);
            self.state.set(2, col, transformation3);
            // Fourth transformation (3 * c[0]) ^ (1 * c[1]) ^ (1 * c[2]) ^ (2 * c[3])
            let transformation4 = Self::gf256_mul(0x03, columns[0])
                                    ^ columns[1]
                                    ^ columns[2]
                                    ^ Self::gf256_mul(0x02, columns[3]);
            self.state.set(3, col, transformation4);
        }
    }

    // Print state
    fn print_state(&mut self) {
        self.state.print();
    }

    // GF multiplication helper
    fn gf256_mul(a: u8, b: u8) -> u8 {
        // Return 0 if either input is zero
        if a == 0 || b == 0 {
            return 0;
        }
        // Use precomputed tables if both inputs are non zero
        let log_a = GF256_LOG_TABLE[a as usize];
        let log_b = GF256_LOG_TABLE[b as usize];
        let log_sum = (log_a as u16 + log_b as u16) % 255;
        GF256_ANTILOG_TABLE[log_sum as usize]
    }
}

fn main() {
    let plaintext_array: [u8; 16] = [
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10
    ];
    // Student ID: 020176095A
    // Hex representation (missing last A): 01 33 DC DF
    let round_key: [u8; 16] = [
        0x0f, 0x15, 0x71, 0xc9, 0x47, 0xd9, 0xe8, 0x59, 0x0c, 0xb7, 0xad, 0xd6, 0x01, 0x33, 0xDC, 0xDF
    ];
    println!("Plaintext: {:x?}", plaintext_array);
    println!("Round key: {:x?}", round_key);
    // Start AES operations
    let plaintext_matrix = Matrix::from_array(plaintext_array);
    let mut aes = AES::from_matrix(plaintext_matrix);
    println!("AES state matrix:");
    aes.print_state();
}
